// Code generated by MockGen. DO NOT EDIT.
// Source: ports/timeout-port/timeout_port.go
//
// Generated by this command:
//
//	mockgen -source=ports/timeout-port/timeout_port.go -destination=mocks/mock_timeout_port.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	command_port "github.com/chitacloud/timeout-mcp/ports/command-port"
	entities "github.com/chitacloud/timeout-mcp/ports/jsonrpc/entities"
	timeout_port "github.com/chitacloud/timeout-mcp/ports/timeout-port"
	gomock "go.uber.org/mock/gomock"
)

// MockTimeoutProxy is a mock of TimeoutProxy interface.
type MockTimeoutProxy struct {
	ctrl     *gomock.Controller
	recorder *MockTimeoutProxyMockRecorder
	isgomock struct{}
}

// MockTimeoutProxyMockRecorder is the mock recorder for MockTimeoutProxy.
type MockTimeoutProxyMockRecorder struct {
	mock *MockTimeoutProxy
}

// NewMockTimeoutProxy creates a new mock instance.
func NewMockTimeoutProxy(ctrl *gomock.Controller) *MockTimeoutProxy {
	mock := &MockTimeoutProxy{ctrl: ctrl}
	mock.recorder = &MockTimeoutProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeoutProxy) EXPECT() *MockTimeoutProxyMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTimeoutProxy) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTimeoutProxyMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTimeoutProxy)(nil).Close))
}

// GetTimeout mocks base method.
func (m *MockTimeoutProxy) GetTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout.
func (mr *MockTimeoutProxyMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockTimeoutProxy)(nil).GetTimeout))
}

// HandleMessage mocks base method.
func (m *MockTimeoutProxy) HandleMessage(msg entities.JSONRPCMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockTimeoutProxyMockRecorder) HandleMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockTimeoutProxy)(nil).HandleMessage), msg)
}

// Run mocks base method.
func (m *MockTimeoutProxy) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockTimeoutProxyMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTimeoutProxy)(nil).Run))
}

// MockTimeoutProxyFactory is a mock of TimeoutProxyFactory interface.
type MockTimeoutProxyFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTimeoutProxyFactoryMockRecorder
	isgomock struct{}
}

// MockTimeoutProxyFactoryMockRecorder is the mock recorder for MockTimeoutProxyFactory.
type MockTimeoutProxyFactoryMockRecorder struct {
	mock *MockTimeoutProxyFactory
}

// NewMockTimeoutProxyFactory creates a new mock instance.
func NewMockTimeoutProxyFactory(ctrl *gomock.Controller) *MockTimeoutProxyFactory {
	mock := &MockTimeoutProxyFactory{ctrl: ctrl}
	mock.recorder = &MockTimeoutProxyFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeoutProxyFactory) EXPECT() *MockTimeoutProxyFactoryMockRecorder {
	return m.recorder
}

// NewTimeoutProxy mocks base method.
func (m *MockTimeoutProxyFactory) NewTimeoutProxy(timeout time.Duration, commandPort command_port.CommandPort) (timeout_port.TimeoutProxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTimeoutProxy", timeout, commandPort)
	ret0, _ := ret[0].(timeout_port.TimeoutProxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTimeoutProxy indicates an expected call of NewTimeoutProxy.
func (mr *MockTimeoutProxyFactoryMockRecorder) NewTimeoutProxy(timeout, commandPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTimeoutProxy", reflect.TypeOf((*MockTimeoutProxyFactory)(nil).NewTimeoutProxy), timeout, commandPort)
}
